WHITESPACE = _{ PATTERN_WHITE_SPACE }
COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }

file = { SOI ~ expression ~ EOI }

expression = {
    prefix_expression
  | infix_expression }

subexpression = {
      conditional_expression
    | binding_expression
    | parenthesized_expression
    | prefix_expression
    | identifier
    | literal
}

conditional_expression = { "if" ~ expression ~ "then" ~ expression ~ "else" ~ expression }
binding_expression = { "let" ~ identifier ~ "=" ~ expression ~ "in" ~ expression }

infix_expression = {
  subexpression ~ ((
        // Operator precedence is defined in `ast::parse_infix_expression`.
        // IMPORTANT: Multiple character tokens should be listed first to ensure they are parsed correctly
        // Logical
          and
        | or
        // Equality
        | equal
        | not_equal
        // Ordering
        | less_than_or_equal
        | greater_than_or_equal
        | less_than
        | greater_than
        // Arithmetic
        | power
        | plus
        | minus
        | times
        | divide
        | modulo
    ) ~ subexpression)*
}

parenthesized_expression = { "(" ~ expression ~ ")"}

prefix_expression = { minus ~ subexpression | not ~ subexpression }

identifier = @{ !(reserved_keyword ~ !XID_CONTINUE) ~ XID_START ~ (XID_CONTINUE)* }
// TODO: Report a custom error when someone tries to use a reserved keyword as an identifier instead of raising a parsing error.
reserved_keyword = {
    "if"
  | "then"
  | "else"
  | "let"
  | "in"
  | boolean // "true" | "false"
  | "and"
  | "or"
  | "not"
}

literal = { integer | boolean }

integer = @{ '0'..'9' ~ ( '0'..'9' | "_" )* }
boolean = { "true" | "false" }

// Equality
equal = { "==" }
not_equal = { "!=" }
// Ordering
less_than_or_equal = { "<=" }
greater_than_or_equal = { ">=" }
less_than = { "<" }
greater_than = { ">" }
// Logical
and = { "and" }
or = { "or" }
not = { "not" } // Unary only
// Arithmetic
power = { "^" }
plus = { "+" }
minus = { "-" } // Unary and binary
times = { "*" }
divide = { "/" }
modulo = { "%" }
